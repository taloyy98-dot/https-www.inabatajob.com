import streamlit as st
import sqlite3
import pandas as pd
from datetime import date
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
import io

# ===== ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤ =====
st.set_page_config(page_title="‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏á‡∏≤‡∏ô IK", page_icon="üìÑ", layout="centered")

# ===== Header =====
st.markdown(
    """
    <div style="text-align: center; padding: 20px;">
        <h1 style="color:#2E86C1;">üìã ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏á‡∏≤‡∏ô</h1>
        <h2 style="color:#117A65;">‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏≠‡∏¥‡∏ô‡∏∞‡∏ö‡∏≤‡∏ï‡∏∞ ‡πÑ‡∏ó‡∏¢ ‡∏à‡∏≥‡∏Å‡∏±‡∏î</h2>
        <hr style="margin-top:20px; margin-bottom:20px;">
    </div>
    """,
    unsafe_allow_html=True
)

# ===== DB Setup =====
conn = sqlite3.connect("work_orders.db", check_same_thread=False)
c = conn.cursor()
c.execute("""
CREATE TABLE IF NOT EXISTS work_orders (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    assigned_to TEXT,
    order_date TEXT,
    time TEXT,
    contact TEXT,
    company TEXT,
    department TEXT,
    address TEXT,
    phone TEXT,
    ordered_by TEXT,
    receiver TEXT,
    receive_date TEXT,
    checklist TEXT,
    remark TEXT
)
""")
conn.commit()

# ===== ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• =====
with st.form("work_order_form", clear_on_submit=True):
    assigned_to = st.text_input("‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡πâ", "DRIVER TXE")
    order_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏á‡∏≤‡∏ô", date.today())
    time = st.text_input("‡πÄ‡∏ß‡∏•‡∏≤")
    contact = st.text_input("‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠")
    company = st.text_input("‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó", "STI PRECISION")
    department = st.text_input("‡πÅ‡∏ú‡∏ô‡∏Å")
    address = st.text_area("‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà")
    phone = st.text_input("‡πÇ‡∏ó‡∏£")
    ordered_by = st.text_input("‡∏ú‡∏π‡πâ‡∏™‡∏±‡πà‡∏á‡∏á‡∏≤‡∏ô", "SIRAPAT")
    receiver = st.text_input("‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö")
    receive_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô)", date.today())

    st.markdown("### ‚òë ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    checklist_options = [
        "‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á/‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£/‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á",
        "‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á/‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£/‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á",
        "‡πÄ‡∏ã‡πá‡∏ô‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ ‡∏£‡∏±‡∏ö‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏Å‡∏•‡∏±‡∏ö 2 ‡πÉ‡∏ö",
        "‡πÄ‡∏ã‡πá‡∏ô‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á‡∏ö‡∏¥‡∏• ‡∏£‡∏±‡∏ö‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡πÉ‡∏ö‡∏ß‡∏≤‡∏á‡∏ö‡∏¥‡∏• ‡πÅ‡∏•‡∏∞‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ‡∏Å‡∏•‡∏±‡∏ö 1 ‡πÉ‡∏ö",
        "‡∏ß‡∏≤‡∏á‡∏ö‡∏¥‡∏• ‡∏£‡∏±‡∏ö‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡πÉ‡∏ö‡∏ß‡∏≤‡∏á‡∏ö‡∏¥‡∏•‡∏Å‡∏•‡∏±‡∏ö",
        "‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ ________ ‡πÉ‡∏ö",
        "‡∏≠‡∏∑‡πà‡∏ô‡πÜ ________________________"
    ]
    checklist = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Checklist", checklist_options)

    remark = st.text_area("üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ / Remark")

    submitted = st.form_submit_button("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    if submitted:
        c.execute("""
        INSERT INTO work_orders (
            assigned_to, order_date, time, contact, company, department,
            address, phone, ordered_by, receiver, receive_date, checklist, remark
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            assigned_to, str(order_date), time, contact, company, department,
            address, phone, ordered_by, receiver, str(receive_date),
            ", ".join(checklist), remark
        ))
        conn.commit()
        st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")

# ===== ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ =====
st.markdown("---")
st.subheader("üìë ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ")

query = "SELECT * FROM work_orders ORDER BY id DESC"
df = pd.read_sql_query(query, conn)

if not df.empty:
    st.dataframe(df, use_container_width=True)

    # ===== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á PDF =====
    def generate_pdf(row):
        buffer = io.BytesIO()
        c = canvas.Canvas(buffer, pagesize=A4)

        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ font (‡πÉ‡∏ä‡πâ Helvetica ‡πÅ‡∏ó‡∏ô)
        c.setFont("Helvetica", 12)

        # Header
        c.drawString(200, 800, "üìã ‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏á‡∏≤‡∏ô")
        c.drawString(180, 780, "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏≠‡∏¥‡∏ô‡∏∞‡∏ö‡∏≤‡∏ï‡∏∞ ‡πÑ‡∏ó‡∏¢ ‡∏à‡∏≥‡∏Å‡∏±‡∏î")
        y = 750

        for col in row.index:
            text = f"{col}: {row[col]}"
            c.drawString(50, y, text)
            y -= 20

        c.save()
        buffer.seek(0)
        return buffer

    # ===== ‡∏õ‡∏∏‡πà‡∏°‡∏û‡∏¥‡∏°‡∏û‡πå =====
    latest_row = df.iloc[0]
    pdf_buffer = generate_pdf(latest_row)

    st.download_button(
        label="üñ®Ô∏è ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏á‡∏≤‡∏ô (PDF)",
        data=pdf_buffer,
        file_name="work_order.pdf",
        mime="application/pdf"
    )
else:
    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ")
